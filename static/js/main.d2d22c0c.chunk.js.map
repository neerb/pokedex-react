{"version":3,"sources":["logo.svg","components/pokemoninformation.js","components/pokemon-card.js","components/errormessage.js","components/pokedex.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PokemonInformation","props","console","log","match","params","state","searchedName","name","idnum","moves","abilities","allinformation","isLoaded","error","this","fetch","then","res","json","result","s","height","setState","id","pokemonHeight","allInformation","document","title","charAt","toUpperCase","slice","catch","window","location","href","className","src","sprites","front_default","back_default","front_shiny","back_shiny","weight","map","m","key","move","abil","ability","showInformation","Component","PokemonCard","imageUrl","information","clicked","routeToInformation","bind","updateClick","alt","onClick","ErrorMessage","style","textAlign","Pokedex","pokemonList","results","pokemon","url","newList","pokemonDataList","push","searchedPokemonDataList","fetchPokemonData","returnMappedImages","showPokemonResults","e","keyCode","getElementById","value","newSearchList","includes","p","basename","exact","path","type","onKeyDown","onChange","placeholder","component","App","Boolean","hostname","backgroundColor","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2d22c0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport \"./pokemoninformationstyles.css\";\r\n\r\nconst capitalize = s => {\r\n  if (typeof s !== \"string\") return \"\";\r\n  return s.charAt(0).toUpperCase() + s.slice(1);\r\n};\r\n\r\nclass PokemonInformation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    console.log(this.props.match.params);\r\n\r\n    this.state = {\r\n      searchedName: this.props.match.params.name,\r\n      name: null,\r\n      idnum: null,\r\n      moves: null,\r\n      abilities: null,\r\n      allinformation: null,\r\n      isLoaded: false,\r\n      error: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n\r\n    fetch(\"https://pokeapi.co/api/v2/pokemon/\" + this.state.searchedName)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        console.log(result.height);\r\n\r\n        this.setState({\r\n          name: result.name,\r\n          idnum: result.id,\r\n          moves: result.moves,\r\n          abilities: result.abilities,\r\n          pokemonHeight: result.height,\r\n          allInformation: result,\r\n          isLoaded: true\r\n        });\r\n\r\n        document.title = capitalize(this.state.name);\r\n      })\r\n      .catch(function() {\r\n        window.location.href = \"/pokedex-react/error\";\r\n      });\r\n  }\r\n\r\n  showInformation() {\r\n    const { allInformation } = this.state;\r\n\r\n    if (this.state.isLoaded === true && this.state.error === false) {\r\n      return (\r\n        <div className=\"pokeinfo\">\r\n          <div className=\"pokemon-name-id\">\r\n            <h>{this.state.name}</h> <h1>Number: {this.state.idnum}</h1>\r\n          </div>\r\n          <div className=\"image-box sprites\">\r\n            <img src={allInformation.sprites.front_default}></img>\r\n            <img src={allInformation.sprites.back_default}></img>\r\n            <img src={allInformation.sprites.front_shiny}></img>\r\n            <img src={allInformation.sprites.back_shiny}></img>\r\n          </div>\r\n          <div className=\"basic-info-box\">\r\n            <div className=\"grid\">\r\n              <div className=\"grid-item\">Height: {allInformation.height}</div>\r\n              <div className=\"grid-item\"> Weight: {allInformation.weight}</div>\r\n            </div>\r\n          </div>\r\n          Moves:\r\n          <div className=\"moves-box\">\r\n            {this.state.moves.map(m => (\r\n              <div className=\"bordered-list-item\" key={m.move.name}>\r\n                {m.move.name}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <br></br>\r\n          Abilities:\r\n          {this.state.abilities.map(abil => (\r\n            <div className=\"bordered-list-item\" key={abil.ability.name}>\r\n              {abil.ability.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pokemon-information\" id=\"pokemon-information\">\r\n        {this.showInformation()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokemonInformation;\r\n","import React, { Component } from \"react\";\r\nimport \"./pokemoncardstyle.css\";\r\nimport Pokedex from \"./pokedex\";\r\nimport PokemonInformation from \"./pokemoninformation\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nclass PokemonCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imageUrl: props.imageUrl,\r\n      name: props.name,\r\n      information: props.information,\r\n      moves: null,\r\n      abilities: null,\r\n      clicked: false\r\n    };\r\n\r\n    this.routeToInformation = this.routeToInformation.bind(this);\r\n    this.updateClick = this.updateClick.bind(this);\r\n  }\r\n\r\n  updateClick() {\r\n    this.setState({ clicked: true });\r\n    window.location.href = \"/pokedex-react/pokeinfo/\" + this.state.name;\r\n  }\r\n\r\n  routeToInformation() {}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"pokemon-image-border\">\r\n          <div className=\"pokemon-id-number\">{this.state.information.id}</div>\r\n\r\n          <img\r\n            className=\"pokemon-image\"\r\n            src={this.state.imageUrl}\r\n            alt={this.state.name}\r\n            onClick={this.updateClick}\r\n          ></img>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokemonCard;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorMessage extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1>An error occured.</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import React, { Component } from \"react\";\r\nimport \"./pokemonstyles.css\";\r\nimport PokemonCard from \"./pokemon-card\";\r\nimport PokemonInformation from \"./pokemoninformation\";\r\nimport ErrorMessage from \"./errormessage\";\r\nimport { BrowserRouter, Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nclass Pokedex extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    fetch(\"https://pokeapi.co/api/v2/pokemon/?offset=0&limit=1000\")\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        this.setState({ pokemonList: result.results });\r\n        //console.log(this.state.pokemonList);\r\n\r\n        this.state.pokemonList.map(pokemon => {\r\n          fetch(pokemon.url)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n              let newList = this.state.pokemonDataList;\r\n\r\n              if (result.sprites.front_default != null) {\r\n                newList.push({\r\n                  name: result.name,\r\n                  imageUrl: result.sprites.front_default,\r\n                  allInformation: result\r\n                });\r\n              }\r\n\r\n              this.setState({\r\n                pokemonDataList: newList,\r\n                searchedPokemonDataList: newList\r\n              });\r\n            });\r\n        });\r\n      });\r\n\r\n    //console.log(this.pokemonDataList);\r\n\r\n    this.state = {\r\n      name: null,\r\n      error: null,\r\n      isLoaded: false,\r\n      pokemon: null,\r\n      pokemonHeight: null,\r\n      abilities: [],\r\n      moves: [],\r\n\r\n      pokemonList: [],\r\n      pokemonDataList: [],\r\n      searchedPokemonDataList: []\r\n    };\r\n\r\n    this.fetchPokemonData = this.fetchPokemonData.bind(this);\r\n    this.returnMappedImages = this.returnMappedImages.bind(this);\r\n    this.showPokemonResults = this.showPokemonResults.bind(this);\r\n  }\r\n\r\n  fetchPokemonData(e) {\r\n    if (e.keyCode === 13) {\r\n      console.log(\"Enter Pressed\");\r\n\r\n      const name = document.getElementById(\"pokemon-search-bar\").value;\r\n\r\n      console.log(\"https://pokeapi.co/api/v2/pokemon/\" + name);\r\n\r\n      fetch(\"https://pokeapi.co/api/v2/pokemon/\" + name)\r\n        .then(res => res.json())\r\n        .then(\r\n          result => {\r\n            console.log(result.height);\r\n\r\n            this.setState({\r\n              name: result.name,\r\n              idnum: result.id,\r\n              isLoaded: true,\r\n              pokemonHeight: result.height,\r\n              abilities: result.abilities,\r\n              moves: result.moves\r\n            });\r\n          },\r\n\r\n          error => {\r\n            this.setState({ isLoaded: true, error });\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n  showPokemonResults() {\r\n    const name = document.getElementById(\"pokemon-search-bar\").value;\r\n    let newSearchList = [];\r\n\r\n    this.state.pokemonDataList.map(pokemon => {\r\n      if (name === \"\") {\r\n        newSearchList = this.state.pokemonDataList;\r\n      } else if (pokemon.name.includes(name)) {\r\n        newSearchList.push(pokemon);\r\n      }\r\n    });\r\n\r\n    this.setState({ searchedPokemonDataList: newSearchList });\r\n  }\r\n\r\n  returnMappedImages() {\r\n    return (\r\n      <div className=\"grid\">\r\n        {this.state.searchedPokemonDataList.map(p => (\r\n          <PokemonCard\r\n            className=\"grid-item\"\r\n            imageUrl={p.imageUrl}\r\n            name={p.name}\r\n            information={p.allInformation}\r\n            key={p.name}\r\n          ></PokemonCard>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  updateSelectedPokemonInformation() {}\r\n\r\n  /*\r\n  getImageFromURL(pokemon) {\r\n    fetch(pokemon.url)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        let newList = this.state.pokemonDataList;\r\n        newList.push({\r\n          name: result.name,\r\n          imageUrl: result.sprites.front_default\r\n        });\r\n\r\n        this.setState({ pokemonDataList: newList });\r\n      });\r\n  }\r\n  */\r\n\r\n  render() {\r\n    const {\r\n      name,\r\n      idnum,\r\n      error,\r\n      isLoaded,\r\n      pokemon,\r\n      pokemonHeight,\r\n      abilities,\r\n      moves,\r\n\r\n      pokemonList,\r\n      pokemonDataList\r\n    } = this.state;\r\n\r\n    return (\r\n      <BrowserRouter basename=\"/pokedex-react\">\r\n        <Route exact path=\"/\">\r\n          <div className=\"pokedex\">\r\n            <div className=\"pokedex-division\" id=\"pokedex-division\">\r\n              <input\r\n                className=\"pokemon-search\"\r\n                type=\"text\"\r\n                onKeyDown={this.fetchPokemonData}\r\n                onChange={this.showPokemonResults}\r\n                id=\"pokemon-search-bar\"\r\n                placeholder=\"Search for a pokemon...\"\r\n              ></input>\r\n\r\n              {this.returnMappedImages()}\r\n            </div>\r\n          </div>\r\n        </Route>\r\n\r\n        <Route path=\"/pokeinfo/:name\" component={PokemonInformation}></Route>\r\n\r\n        <Route path=\"/error\" component={ErrorMessage}></Route>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokedex;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport Pokedex from \"./components/pokedex\";\r\n\r\nfunction App() {\r\n  return <Pokedex></Pokedex>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Pokedex from \"./components/pokedex\";\r\n\r\ndocument.getElementById(\"root\").style.backgroundColor = \"red\";\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}